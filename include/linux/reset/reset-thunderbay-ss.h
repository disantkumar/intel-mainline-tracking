/* SPDX-License-Identifier: GPL-2.0 */
/*
 * Copyright (C) 2020 Intel Corporation
 */

#include <dt-bindings/reset/thunderbay-reset.h>

/* CPUSS reset data */
static const struct thunderbay_rst_map thunderbay_cpuss_resets[] = {
	[TBH_CPUSS_OCS_RST] = THUNDERBAY_RESET(0x0, 2),
};

static const struct thunderbay_rst_data thunderbay_cpuss_reset_data = {
	.resets = thunderbay_cpuss_resets,
	.n_resets = ARRAY_SIZE(thunderbay_cpuss_resets),
};

/* PSS reset data */
static const struct thunderbay_rst_map thunderbay_pss_resets1[] = {
	[TBH_PSS_EFUSE_PRSTN] = THUNDERBAY_RESET(0x0000, 0),
	[TBH_PSS_GPIO_RST_N] = THUNDERBAY_RESET(0x1000, 0),
	[TBH_PSS_I2C_INST_0_RST_N] = THUNDERBAY_RESET(0x9000, 0),
	[TBH_PSS_I2C_INST_1_RST_N] = THUNDERBAY_RESET(0xA000, 0),
	[TBH_PSS_I2C_INST_2_RST_N] = THUNDERBAY_RESET(0xB000, 0),
	[TBH_PSS_I2C_INST_3_RST_N] = THUNDERBAY_RESET(0xC000, 0),
	[TBH_PSS_I2C_INST_4_RST_N] = THUNDERBAY_RESET(0xD000, 0),
	[TBH_PSS_UART_INST_0_RST_N] = THUNDERBAY_RESET(0xE000, 0),
	[TBH_PSS_UART_INST_1_RST_N] = THUNDERBAY_RESET(0xF000, 0),
	[TBH_PSS_EMMC_RST_N] = THUNDERBAY_RESET(0x10000, 0),
};

static const struct thunderbay_rst_data thunderbay_pss_reset_data1 = {
	.resets = thunderbay_pss_resets1,
	.n_resets = ARRAY_SIZE(thunderbay_pss_resets1),
};

static const struct thunderbay_rst_map thunderbay_pss_resets2[] = {
	[TBH_PSS_SSI_INST_0_RST_N] = THUNDERBAY_RESET(0x0, 0),
	[TBH_PSS_SSI_INST_1_RST_N] = THUNDERBAY_RESET(0x1000, 0),
	[TBH_PSS_SMBUS_RST_N] = THUNDERBAY_RESET(0x2000, 0),
	[TBH_PSS_DMAC_INST_0_RST_N] = THUNDERBAY_RESET(0x3000, 0),
	[TBH_PSS_TRNG_RST_N] = THUNDERBAY_RESET(0x4000, 0),
	[TBH_PSS_ETHERNET_INST_0_RST_N] = THUNDERBAY_RESET(0x5000, 0),
	[TBH_PSS_ETHERNET_INST_1_RST_N] = THUNDERBAY_RESET(0x6000, 0),
	[TBH_PSS_DMAC_SECURE_RST_N] = THUNDERBAY_RESET(0x9000, 0),
};

static const struct thunderbay_rst_data thunderbay_pss_reset_data2 = {
	.resets = thunderbay_pss_resets2,
	.n_resets = ARRAY_SIZE(thunderbay_pss_resets2),
};

/* PCIe reset data */
static const struct thunderbay_rst_map thunderbay_pcie_resets[] = {
	[TBH_PCIE_POWER_ON_RST] = THUNDERBAY_RESET(0x0, 0),
	[TBH_PCIE_SUBSYSTEM_RST] = THUNDERBAY_RESET(0x0, 1),
	[TBH_PCIE_PHY_RST] = THUNDERBAY_RESET(0x0, 2),
	[TBH_PCIE_CTRL0_RST] = THUNDERBAY_RESET(0x0, 3),
	[TBH_PCIE_CTRL1_RST] = THUNDERBAY_RESET(0x0, 4),
};

static const struct thunderbay_rst_data thunderbay_pcie_reset_data = {
	.resets = thunderbay_pcie_resets,
	.n_resets = ARRAY_SIZE(thunderbay_pcie_resets),
};

/* COMSS reset data */
static const struct thunderbay_rst_map thunderbay_comss_resets[] = {
	[TBH_COMSS_VPU_VPU_RESET_N] = THUNDERBAY_RESET(0x00, 0),
	[TBH_COMSS_OCS_OCS_RESET_N] = THUNDERBAY_RESET(0x100, 0),
	[TBH_COMSS_MEDIA_VCEJ_CORERST_N] = THUNDERBAY_RESET(0X1000, 0),
	[TBH_COMSS_MEDIA_VCEJ_ARESET_N] = THUNDERBAY_RESET(0X1000, 1),
	[TBH_COMSS_MEDIA_VCEJ_PRESET_N] = THUNDERBAY_RESET(0X1000, 2),
	[TBH_COMSS_MEDIA_VCE_CORERST_N] = THUNDERBAY_RESET(0X1000, 3),
	[TBH_COMSS_MEDIA_VCE_ARESET_N] = THUNDERBAY_RESET(0X1000, 4),
	[TBH_COMSS_MEDIA_VCE_PRESET_N] = THUNDERBAY_RESET(0X1000, 5),
	[TBH_COMSS_MEDIA_VCDA_CORERST_N] = THUNDERBAY_RESET(0X1000, 6),
	[TBH_COMSS_MEDIA_VCDA_ARESET_N] = THUNDERBAY_RESET(0X1000, 7),
	[TBH_COMSS_MEDIA_VCDA_PRESET_N] = THUNDERBAY_RESET(0X1000, 8),
	[TBH_COMSS_MEDIA_VCDB_CORERST_N] = THUNDERBAY_RESET(0X1000, 9),
	[TBH_COMSS_MEDIA_VCDB_ARESET_N] = THUNDERBAY_RESET(0X1000, 10),
	[TBH_COMSS_MEDIA_VCDB_PRESET_N] = THUNDERBAY_RESET(0X1000, 11),
	[TBH_COMSS_MEDIA_TBU0_ARESET_N] = THUNDERBAY_RESET(0X1000, 12),
	[TBH_COMSS_MEDIA_TBU1_ARESET_N] = THUNDERBAY_RESET(0X1000, 13),
	[TBH_COMSS_MEDIA_TBU2_ARESET_N] = THUNDERBAY_RESET(0X1000, 14),
	[TBH_COMSS_MEDIA_TBU3_ARESET_N] = THUNDERBAY_RESET(0X1000, 15),
	[TBH_COMSS_MEDIA_TBU4_ARESET_N] = THUNDERBAY_RESET(0X1000, 16),
	[TBH_COMSS_MEDIA_TCU_ARESET_N] = THUNDERBAY_RESET(0X1000, 17),
	[TBH_COMSS_MEDIA_DTI_ARESET_N] = THUNDERBAY_RESET(0X1000, 18),
	[TBH_COMSS_MEDIA_PVT_ARESET_N] = THUNDERBAY_RESET(0X1000, 19),
	[TBH_COMSS_MEDIA_PVT_PRESET_N] = THUNDERBAY_RESET(0X1000, 20),
};

static const struct thunderbay_rst_data thunderbay_comss_reset_data = {
	.resets = thunderbay_comss_resets,
	.n_resets = ARRAY_SIZE(thunderbay_comss_resets),
};

/* MEMSS reset data */
static const struct thunderbay_rst_map thunderbay_memss_resets[] = {
	[TBH_MEMSS_MC_MC_U1_CORE_DDRC_RSTN] = THUNDERBAY_RESET(0x0, 0),
	[TBH_MEMSS_MC_MC_U2_CORE_DDRC_RSTN] = THUNDERBAY_RESET(0x0, 1),
	[TBH_MEMSS_MC_MC_U1_SBR_RESETN] = THUNDERBAY_RESET(0x0, 2),
	[TBH_MEMSS_MC_MC_U2_SBR_RESETN] = THUNDERBAY_RESET(0x0, 3),
	[TBH_MEMSS_MC_MC_U1_ARESETN_0] = THUNDERBAY_RESET(0x0, 4),
	[TBH_MEMSS_MC_MC_U2_ARESETN_0] = THUNDERBAY_RESET(0x0, 5),
	[TBH_MEMSS_MC_MC_U1_PRESETN] = THUNDERBAY_RESET(0x0, 6),
	[TBH_MEMSS_MC_MC_U2_PRESETN] = THUNDERBAY_RESET(0x0, 7),
	[TBH_MEMSS_MC_MC_U1_SCAN_RESETN] = THUNDERBAY_RESET(0x0, 8),
	[TBH_MEMSS_MC_MC_U2_SCAN_RESETN] = THUNDERBAY_RESET(0x0, 9),
	[TBH_MEMSS_MC_PHY_U1_PRESETN_APB] = THUNDERBAY_RESET(0x0, 10),
	[TBH_MEMSS_MC_PHY_U1_PWROKIN] = THUNDERBAY_RESET(0x0, 11),
	[TBH_MEMSS_MC_PHY_U1_RESET] = THUNDERBAY_RESET(0x0, 12),
	[TBH_MEMSS_MC_PHY_U1_WRSTN] = THUNDERBAY_RESET(0x0, 13),
	[TBH_MEMSS_MC_DDRSS_APB_REGS_U1_I_PRESETN] = THUNDERBAY_RESET(0x0, 14),
	[TBH_MEMSS_MC_DDRSS_APB_REGS_U1_I_RSTN] = THUNDERBAY_RESET(0x0, 15),
	[TBH_MEMSS_MC_MC_COUNTER_TOP_U1_I_MCA_RSTN] = THUNDERBAY_RESET(0x0, 16),
	[TBH_MEMSS_MC_MC_COUNTER_TOP_U1_I_MCB_RSTN] = THUNDERBAY_RESET(0x0, 17),
	[TBH_MEMSS_MC_DDRSS_GLUE_U1_I_MCA_RSTN] = THUNDERBAY_RESET(0x0, 18),
	[TBH_MEMSS_MC_DDRSS_GLUE_U1_I_MCB_RSTN] = THUNDERBAY_RESET(0x0, 19),
	[TBH_MEMSS_PHY_PHY_U1_PRESETN_APB] = THUNDERBAY_RESET(0x10, 0),
	[TBH_MEMSS_PHY_PHY_U1_PWROKIN] = THUNDERBAY_RESET(0x10, 1),
	[TBH_MEMSS_PHY_PHY_U1_RESET] = THUNDERBAY_RESET(0x10, 2),
	[TBH_MEMSS_PHY_PHY_U1_WRSTN] = THUNDERBAY_RESET(0x10, 3),
	[TBH_MEMSS_MISC_DDRSS_APB_REGS_U1_I_PRESETN] = THUNDERBAY_RESET(0x20, 0),
	[TBH_MEMSS_MISC_DDRSS_APB_REGS_U1_I_RSTN] = THUNDERBAY_RESET(0x20, 1),
	[TBH_MEMSS_MISC_MC_COUNTER_TOP_U1_I_MCA_RSTN] = THUNDERBAY_RESET(0x20, 2),
	[TBH_MEMSS_MISC_MC_COUNTER_TOP_U1_I_MCB_RSTN] = THUNDERBAY_RESET(0x20, 3),
	[TBH_MEMSS_MISC_DDRSS_GLUE_U1_I_MCA_RSTN] = THUNDERBAY_RESET(0x20, 4),
	[TBH_MEMSS_MISC_DDRSS_GLUE_U1_I_MCB_RSTN] = THUNDERBAY_RESET(0x20, 5),
};

static const struct thunderbay_rst_data thunderbay_memss_reset_data = {
	.resets = thunderbay_memss_resets,
	.n_resets = ARRAY_SIZE(thunderbay_memss_resets),
};
