/* SPDX-License-Identifier: GPL-2.0-only */
/*
 * Thunderbay Temperature sensor local-host module.
 *
 * Copyright (C) 2019-2020 Intel Corporation.
 */

#ifndef _LINUX_THB_TSENS_H
#define _LINUX_THB_TSENS_H

#include <linux/thermal.h>

/* Register values for thunderbay temperature (PVT Sensor) */
#define SAR_TEMP_DTS0_OFFSET 0x4048
#define SAR_TEMP_DTS1_OFFSET 0x404c
#define SAR_TEMP_DTS2_OFFSET 0x4050
#define COM_CPR_3_BASE 0x485520000
#define COM_CPR_2_BASE 0x385520000
#define COM_CPR_1_BASE 0x285520000
#define COM_CPR_0_BASE 0x185520000
#define A53SS_BASE     0x88830000
/* GPIO Polarity */
#define GPIO_REG 0x80450000
#define GPIO_POWER_OFFSET 0x010C
#define GPIO_POLARITY_EVT1 0x6
#define GPIO_POLARITY_EVT2 0xE
#define GPIO_PMAX_POLARITY_EVT1 0x2
/* SAR_PID_EN */
#define DTS_THD_SAR_PID_EN_ABORT 0x3024
/* THERM_CTRL */
#define A53SS_THERM_CTRL 0x4c0

/* THERMAL INTERRUPT CLEAR */
#define SW_THERM_INTR_STAT 0x407c

/* ICCMAX_PMAX_DEFAULT_CFG */
#define ICCMAX_THROT_CFG_CCU0_OFFSET 0X307c
#define ICCMAX_GPIO_EN_CCU0_OFFSET 0x30bc
#define ICCMAX_THROT_CFG_CCU0_VALUE 0x81019
#define REG_THROT_MODE 0x1
#define REG_THROT_CNT 0xc
#define REG_MAX_CG_MASK 0x8
#define REG_START_CG_MASK 0x0
#define REG_CG_INCR_VAL 0x1
#define COMSS_ICCMAX_THROT_CFG_CCU0 ((REG_THROT_MODE) | (REG_THROT_CNT << 1) |\
				    (REG_MAX_CG_MASK << 9) | (REG_START_CG_MASK << 14) |\
    				    (REG_CG_INCR_VAL << 19))
#define COMSS_0_ICCMAX_GPIO_EN_CCU0 0x9
#define COMSS_1_ICCMAX_GPIO_EN_CCU0 0x5
#define COMSS_2_ICCMAX_GPIO_EN_CCU0 0x9
#define COMSS_3_ICCMAX_GPIO_EN_CCU0 0x5
#define COMSS_ONLY_PMAX_ENABLED 0x1
#define COMSS_THERM_SCALING_CNT 0x1
#define COMSS_THERM_SCALING_CNT_OFFSET 0x3078

/*temp boundary cases */
/* temperature boundary cases */
#define LOWER_TEMP_NRANGE 27
#define UPPER_TEMP_NRANGE 260
#define LOWER_TEMP -13736
#define UPPER_TEMP 153123

/* PID Registers */
#define HW_THROT_MODE_CCU0 0x308c
#define HW_THROT_MODE_CCU1 0x3090
#define HW_THROT_MODE_CCU2 0x3094
#define HW_THROT_MODE_CCU3 0x3098
#define THRES_MASK_DTS0 0x4c4
#define THRES_MASK_DTS1 0x4c8
#define THRES_MASK_DTS2 0x4cc
#define THRES_THROT_CNT_CFG 0x3020
#define THERM_SCALING_CNT 0x3078
#define DIV_THROT_CFG_CCU0 0x3000
#define DIV_THROT_CFG_CCU1 0x3004
#define DIV_THROT_CFG_CCU2 0x3008
#define DIV_THROT_CFG_CCU3 0x300C
#define CG_THROT_CFG1_CCU0 0x3010
#define CG_THROT_CFG1_CCU1 0x3014
#define CG_THROT_CFG1_CCU2 0x3018
#define CG_THROT_CFG1_CCU3 0x301C
#define DTS_THD_SAR_PID_EN_ABORT 0x3024
#define DTS_SAR_MODE_CFG 0x3028
#define DTS_PID_THROT_CFG 0x302C
#define DTS_PID_CTRL_DTS0 0x3030
#define DTS_PID_CTRL_DTS1 0x3034
#define DTS_PID_CTRL_DTS2 0x3038
#define DTS_PID_KP_DTS0 0x303C
#define DTS_PID_KP_DTS1 0x3040
#define DTS_PID_KP_DTS2 0x3044
#define DTS_PID_KD_DTS0 0x3048
#define DTS_PID_KD_DTS1 0x304C
#define DTS_PID_KD_DTS2 0x3050
#define DTS_PID_KI_DTS0 0x3054
#define DTS_PID_KI_DTS1 0x3058
#define DTS_PID_KI_DTS2 0x305C
#define DTS_PID_RISE_THRES_DTS0 0x3060
#define DTS_PID_RISE_THRES_DTS1 0x3064
#define DTS_PID_RISE_THRES_DTS2 0x3068
#define DTS_PID_FALL_THRES_DTS0 0x306C
#define DTS_PID_FALL_THRES_DTS1 0x3070
#define DTS_PID_FALL_THRES_DTS2 0x3074
#define DTS_PID_MAX_INTEG_LIMIT 0x30AC
#define DTS_PID_MIN_INTEG_LIMIT 0x30B0
#define DTS_PID_MAX_ACCUM_LIMIT 0x30B4
#define DTS_PID_MIN_ACCUM_LIMIT 0x30B8

/* PID COMMON CONFIG */

#define DTS_THD_SAR_PID_EN_ABORT_VALUE 0x71c0
#define DTS_PID_RISE_THRES_DTS0_VALUE 0X0
#define DTS_PID_RISE_THRES_DTS1_VALUE 0X0
#define DTS_PID_RISE_THRES_DTS2_VALUE 0X0
#define DTS_PID_FALL_THRES_DTS0_VALUE 0X0
#define DTS_PID_FALL_THRES_DTS1_VALUE 0X0
#define DTS_PID_FALL_THRES_DTS2_VALUE 0X0

#define DTS_PID_KP_DTS0_VALUE 0X1
#define DTS_PID_KP_DTS1_VALUE 0X1
#define DTS_PID_KP_DTS2_VALUE 0X1
#define DTS_PID_KD_DTS0_VALUE 0X0
#define DTS_PID_KD_DTS1_VALUE 0X0
#define DTS_PID_KD_DTS2_VALUE 0X0
#define DTS_PID_KI_DTS0_VALUE 0X0
#define DTS_PID_KI_DTS1_VALUE 0X0
#define DTS_PID_KI_DTS2_VALUE 0X0

#define THD_TO_BE_CONFIGURED 0XC0
#define DTS_PID_CTRL_DTS0_VALUE (0X100 | THD_TO_BE_CONFIGURED)
#define DTS_PID_CTRL_DTS1_VALUE (0X100 | THD_TO_BE_CONFIGURED)
#define DTS_PID_CTRL_DTS2_VALUE (0X100 | THD_TO_BE_CONFIGURED)

/* PID CPUSS CONFIG */
#define DIV_THROT_CFG_CCU0_VALUE 0X85
#define DIV_THROT_CFG_CCU1_VALUE 0X85
#define DIV_THROT_CFG_CCU2_VALUE 0X85
#define DIV_THROT_CFG_CCU3_VALUE  0X85

#define HW_THROT_MODE_CCU0_VALUE 0X5
#define HW_THROT_MODE_CCU1_VALUE 0X5
#define HW_THROT_MODE_CCU2_VALUE 0X9
#define HW_THROT_MODE_CCU3_VALUE 0X9
 
/* PID COMPSS */

#define CG_THROT_CFG1_CCU0_VALUE 0X10860
#define CG_THROT_CFG1_CCU1_VALUE 0X10860
#define COMPSS_HW_THROT_MODE_CCU0_VALUE 0X7
#define COMPSS_HW_THROT_MODE_CCU1_VALUE 0XB

#define REG_NAME_LENGTH 50

/* temperature calculation lookup */

#define THUNDERBAY_SENSOR_BASE_TEMP 27

static int raw_thb[] = {
-13736, -13300, -12862, -12422, -11981,

-11539, -11095, -10649, -10202, -9754,

-9304, -8852, -8399, -7945, -7489,

-7031, -6572, -6111, -5649, -5185,

-4719, -4252, -3783, -3313, -2841,

-2367, -1892, -1415, -936, -456,

25, 508, 994, 1481, 1970,

2460, 2952, 3446, 3942, 4439,

4939, 5440, 5943, 6447, 6954,

7462, 7972, 8484, 8998, 9513,

10031, 10550, 11071, 11594, 12119,

12646, 13175, 13706, 14239, 14774,

15310, 15849, 16390, 16933, 17477,

18024, 18573, 19124, 19677, 20232,

20789, 21348, 21909, 22473, 23038,

23606, 24176, 24748, 25322, 25899,

26477, 27058, 27641, 28226, 28814,

29404, 29996, 30590, 31187, 31786,

32388, 32991, 33598, 34206, 34817,

35430, 36046, 36664, 37285, 37908,

38534, 39162, 39792, 40426, 41061,

41699, 42340, 42984, 43630, 44278,

44930, 45584, 46240, 46899, 47561,

48226, 48894, 49564, 50237, 50912,

51591, 52272, 52957, 53644, 54334,

55026, 55722, 56421, 57122, 57827,

58535, 59245, 59959, 60675, 61395,

62118, 62844, 63573, 64305, 65040,

65779, 66521, 67266, 68014, 68765,

69520, 70278, 71039, 71804, 72572,

73344, 74119, 74897, 75679, 76464,

77253, 78046, 78842, 79641, 80444,

81251, 82061, 82876, 83693, 84515,

85340, 86169, 87002, 87839, 88680,

89524, 90373, 91225, 92082, 92942,

93806, 94675, 95547, 96424, 97305,

98190, 99079, 99973, 100870, 101772,

102679, 103589, 104504, 105424, 106348,

107276, 108209, 109147, 110089, 111035,

111987, 112943, 113904, 114869, 115839,

116815, 117795, 118779, 119769, 120764,

121764, 122769, 123779, 124794, 125814,

126840, 127870, 128906, 129948, 130994,

132047, 133104, 134167, 135236, 136310,

137390, 138475, 139566, 140663, 141766,

142875, 143989, 145110, 146236, 147369,

148507, 149652, 150803, 151960, 153123};

static int raw_thb_size = sizeof(raw_thb) / sizeof(int);

char *thermal_throt[] = {
"HW_THROT_MODE_CCU0", "HW_THROT_MODE_CCU1", "HW_THROT_MODE_CCU2",
"HW_THROT_MODE_CCU3", "THRES_MASK_DTS0", "THRES_MASK_DTS1", "THRES_MASK_DTS2",
"THRES_THROT_CNT_CFG", "THERM_SCALING_CNT", "DIV_THROT_CFG_CCU0", "DIV_THROT_CFG_CCU1",
"DIV_THROT_CFG_CCU2", "DIV_THROT_CFG_CCU3", "CG_THROT_CFG1_CCU0", "CG_THROT_CFG1_CCU1",
"CG_THROT_CFG1_CCU2", "CG_THROT_CFG1_CCU3", "DTS_THD_SAR_PID_EN_ABORT", "DTS_SAR_MODE_CFG",
"DTS_PID_THROT_CFG", "DTS_PID_CTRL_DTS0", "DTS_PID_CTRL_DTS1", "DTS_PID_CTRL_DTS2",
"DTS_PID_KP_DTS0", "DTS_PID_KP_DTS1", "DTS_PID_KP_DTS2", "DTS_PID_KD_DTS0",
"DTS_PID_KD_DTS1", "DTS_PID_KD_DTS2", "DTS_PID_KI_DTS0", "DTS_PID_KI_DTS1",
"DTS_PID_KI_DTS2", "DTS_PID_RISE_THRES_DTS0", "DTS_PID_RISE_THRES_DTS1",
"DTS_PID_RISE_THRES_DTS2", "DTS_PID_FALL_THRES_DTS0", "DTS_PID_FALL_THRES_DTS1",
"DTS_PID_FALL_THRES_DTS2", "DTS_PID_MAX_INTEG_LIMIT", "DTS_PID_MIN_INTEG_LIMIT",
"DTS_PID_MAX_ACCUM_LIMIT", "DTS_PID_MIN_ACCUM_LIMIT"
};

int thermal_throt_offset[] = {
0x308c, 0x3090, 0x3094, 0x3098, 0x4c4, 0x4c8, 0x4cc, 0x3020, 0x3078, 0x3000, 0x3004,
0x3008, 0x300C, 0x3010, 0x3014, 0x3018, 0x301C, 0x3024, 0x3028, 0x302C, 0x3030, 0x3034,
0x3038, 0x303C, 0x3040, 0x3044, 0x3048, 0x304C, 0x3050, 0x3054, 0x3058, 0x305C, 0x3060,
0x3064, 0x3068, 0x306C, 0x3070, 0x3074, 0x30AC, 0x30B0, 0x30B4, 0x30B8
};

static int thb_thermal_size = sizeof(thermal_throt_offset) / sizeof(int);

enum thb_thermal_sensor_en {
	CPUSS_SOUTH_NOC,
	CPUSS_NORTH_NOC,
	PAR_VPU_0,
	PAR_VPU_1,
	PAR_VPU_2,
	PAR_VPU_3,
	PAR_MEDIA_0,
	PAR_MEDIA_1,
	PAR_MEDIA_2,
	PAR_MEDIA_3,
	NOC_VPU_DDR_0,
	NOC_VPU_DDR_1,
	NOC_VPU_DDR_2,
	NOC_VPU_DDR_3,
	THUNDERBAY_SENSOR_MAX
};

#endif /* _LINUX_THB_TSENS_H */
